/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newapp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newapp.Test1;
import com.newapp.service.Test1Service;


/**
 * Controller object for domain model class Test1.
 * @see Test1
 */
@RestController("blobscenarios.Test1Controller")
@Api(value = "Test1Controller", description = "Exposes APIs to work with Test1 resource.")
@RequestMapping("/blobscenarios/Test1")
public class Test1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Test1Controller.class);

    @Autowired
	@Qualifier("blobscenarios.Test1Service")
	private Test1Service test1Service;

	@ApiOperation(value = "Creates a new Test1 instance.")
@RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Test1 createTest1(@RequestPart("wm_data_json") Test1 test1, @RequestPart(value = "name", required = false) MultipartFile _name) {
		LOGGER.debug("Create Test1 with information: {}" , test1);

    test1.setName(WMMultipartUtils.toByteArray(_name));
		test1 = test1Service.create(test1);
		LOGGER.debug("Created Test1 with information: {}" , test1);

	    return test1;
	}

    @ApiOperation(value = "Returns the Test1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Test1 getTest1(@PathVariable("id") byte[] id) throws EntityNotFoundException {
        LOGGER.debug("Getting Test1 with id: {}" , id);

        Test1 foundTest1 = test1Service.getById(id);
        LOGGER.debug("Test1 details with id: {}" , foundTest1);

        return foundTest1;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Test1 instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getTest1BLOBContent(@PathVariable("id") byte[] id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Test1 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Test1.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Test1 test1 = test1Service.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(test1, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Test1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Test1 editTest1(@PathVariable("id") byte[] id, @RequestBody Test1 test1) throws EntityNotFoundException {
        LOGGER.debug("Editing Test1 with id: {}" , test1.getName());

        test1.setName(id);
        test1 = test1Service.update(test1);
        LOGGER.debug("Test1 details with id: {}" , test1);

        return test1;
    }

    @ApiOperation(value = "Updates the Test1 instance associated with the given id.This API should be used when Test1 instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Test1 editTest1(@PathVariable("id") byte[] id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        Test1 newTest1 = WMMultipartUtils.toObject(multipartHttpServletRequest, Test1.class, "blobscenarios");
        newTest1.setName(id);

        Test1 oldTest1 = test1Service.getById(id);
        WMMultipartUtils.updateLobsContent(oldTest1, newTest1);
        LOGGER.debug("Updating Test1 with information: {}" , newTest1);

        return test1Service.update(newTest1);
    }

    @ApiOperation(value = "Deletes the Test1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTest1(@PathVariable("id") byte[] id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Test1 with id: {}" , id);

        Test1 deletedTest1 = test1Service.delete(id);

        return deletedTest1 != null;
    }

    /**
     * @deprecated Use {@link #findTest1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Test1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Test1> searchTest1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Test1s list");
        return test1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Test1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Test1> findTest1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Test1s list");
        return test1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Test1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Test1> filterTest1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Test1s list");
        return test1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTest1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return test1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Test1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTest1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Test1s");
		return test1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTest1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return test1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Test1Service instance
	 */
	protected void setTest1Service(Test1Service service) {
		this.test1Service = service;
	}

}

