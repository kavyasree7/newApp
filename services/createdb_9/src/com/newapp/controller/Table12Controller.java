/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newapp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newapp.Table12;
import com.newapp.Table12Id;
import com.newapp.service.Table12Service;


/**
 * Controller object for domain model class Table12.
 * @see Table12
 */
@RestController("createdb_9.Table12Controller")
@Api(value = "Table12Controller", description = "Exposes APIs to work with Table12 resource.")
@RequestMapping("/createdb_9/Table12")
public class Table12Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table12Controller.class);

    @Autowired
	@Qualifier("createdb_9.Table12Service")
	private Table12Service table12Service;

	@ApiOperation(value = "Creates a new Table12 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Table12 createTable12(@RequestBody Table12 table12) {
		LOGGER.debug("Create Table12 with information: {}" , table12);

		table12 = table12Service.create(table12);
		LOGGER.debug("Created Table12 with information: {}" , table12);

	    return table12;
	}

@ApiOperation(value = "Returns the Table12 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table12 getTable12(@RequestParam("id") Integer id,@RequestParam("column2") String column2) throws EntityNotFoundException {

        Table12Id table12Id = new Table12Id();
        table12Id.setId(id);
        table12Id.setColumn2(column2);

        LOGGER.debug("Getting Table12 with id: {}" , table12Id);
        Table12 table12 = table12Service.getById(table12Id);
        LOGGER.debug("Table12 details with id: {}" , table12);

        return table12;
    }



    @ApiOperation(value = "Updates the Table12 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table12 editTable12(@RequestParam("id") Integer id,@RequestParam("column2") String column2, @RequestBody Table12 table12) throws EntityNotFoundException {

        table12.setId(id);
        table12.setColumn2(column2);

        LOGGER.debug("Table12 details with id is updated with: {}" , table12);

        return table12Service.update(table12);
    }


    @ApiOperation(value = "Deletes the Table12 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable12(@RequestParam("id") Integer id,@RequestParam("column2") String column2) throws EntityNotFoundException {

        Table12Id table12Id = new Table12Id();
        table12Id.setId(id);
        table12Id.setColumn2(column2);

        LOGGER.debug("Deleting Table12 with id: {}" , table12Id);
        Table12 table12 = table12Service.delete(table12Id);

        return table12 != null;
    }


    @RequestMapping(value = "/column3-column4", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Table12 with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table12 getByColumn3AndColumn4(@RequestParam("column3") String column3, @RequestParam("column4") String column4) {
        LOGGER.debug("Getting Table12 with uniques key Column3AndColumn4");
        return table12Service.getByColumn3AndColumn4(column3, column4);
    }

    /**
     * @deprecated Use {@link #findTable12s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table12 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table12> searchTable12sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table12s list");
        return table12Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table12 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table12> findTable12s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table12s list");
        return table12Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table12 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table12> filterTable12s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table12s list");
        return table12Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable12s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table12Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table12 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable12s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table12s");
		return table12Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable12AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table12Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table12Service instance
	 */
	protected void setTable12Service(Table12Service service) {
		this.table12Service = service;
	}

}

