/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newapp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newapp.Table182;
import com.newapp.service.Table182Service;


/**
 * Controller object for domain model class Table182.
 * @see Table182
 */
@RestController("createdb_9.Table182Controller")
@Api(value = "Table182Controller", description = "Exposes APIs to work with Table182 resource.")
@RequestMapping("/createdb_9/Table182")
public class Table182Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table182Controller.class);

    @Autowired
	@Qualifier("createdb_9.Table182Service")
	private Table182Service table182Service;

	@ApiOperation(value = "Creates a new Table182 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Table182 createTable182(@RequestBody Table182 table182) {
		LOGGER.debug("Create Table182 with information: {}" , table182);

		table182 = table182Service.create(table182);
		LOGGER.debug("Created Table182 with information: {}" , table182);

	    return table182;
	}

    @ApiOperation(value = "Returns the Table182 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table182 getTable182(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table182 with id: {}" , id);

        Table182 foundTable182 = table182Service.getById(id);
        LOGGER.debug("Table182 details with id: {}" , foundTable182);

        return foundTable182;
    }

    @ApiOperation(value = "Updates the Table182 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table182 editTable182(@PathVariable("id") String id, @RequestBody Table182 table182) throws EntityNotFoundException {
        LOGGER.debug("Editing Table182 with id: {}" , table182.getColumn2());

        table182.setColumn2(id);
        table182 = table182Service.update(table182);
        LOGGER.debug("Table182 details with id: {}" , table182);

        return table182;
    }

    @ApiOperation(value = "Deletes the Table182 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable182(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table182 with id: {}" , id);

        Table182 deletedTable182 = table182Service.delete(id);

        return deletedTable182 != null;
    }

    /**
     * @deprecated Use {@link #findTable182s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table182 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table182> searchTable182sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table182s list");
        return table182Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table182 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table182> findTable182s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table182s list");
        return table182Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table182 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table182> filterTable182s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table182s list");
        return table182Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable182s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table182Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table182 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable182s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table182s");
		return table182Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable182AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table182Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table182Service instance
	 */
	protected void setTable182Service(Table182Service service) {
		this.table182Service = service;
	}

}

