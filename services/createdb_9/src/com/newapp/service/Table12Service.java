/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newapp.Table12;
import com.newapp.Table12Id;

/**
 * Service object for domain model class {@link Table12}.
 */
public interface Table12Service {

    /**
     * Creates a new Table12. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Table12 if any.
     *
     * @param table12 Details of the Table12 to be created; value cannot be null.
     * @return The newly created Table12.
     */
	Table12 create(@Valid Table12 table12);


	/**
	 * Returns Table12 by given id if exists.
	 *
	 * @param table12Id The id of the Table12 to get; value cannot be null.
	 * @return Table12 associated with the given table12Id.
     * @throws EntityNotFoundException If no Table12 is found.
	 */
	Table12 getById(Table12Id table12Id) throws EntityNotFoundException;

    /**
	 * Find and return the Table12 by given id if exists, returns null otherwise.
	 *
	 * @param table12Id The id of the Table12 to get; value cannot be null.
	 * @return Table12 associated with the given table12Id.
	 */
	Table12 findById(Table12Id table12Id);

    /**
	 * Find and return the Table12 for given column3  andcolumn4  if exists.
	 *
	 * @param column3 value of column3; value cannot be null.
	 * @param column4 value of column4; value cannot be null.
	 * @return Table12 associated with the given inputs.
     * @throws EntityNotFoundException if no matching Table12 found.
	 */
    Table12 getByColumn3AndColumn4(String column3, String column4)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing Table12. It replaces all fields of the existing Table12 with the given table12.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Table12 if any.
     *
	 * @param table12 The details of the Table12 to be updated; value cannot be null.
	 * @return The updated Table12.
	 * @throws EntityNotFoundException if no Table12 is found with given input.
	 */
	Table12 update(@Valid Table12 table12) throws EntityNotFoundException;

    /**
	 * Deletes an existing Table12 with the given id.
	 *
	 * @param table12Id The id of the Table12 to be deleted; value cannot be null.
	 * @return The deleted Table12.
	 * @throws EntityNotFoundException if no Table12 found with the given id.
	 */
	Table12 delete(Table12Id table12Id) throws EntityNotFoundException;

	/**
	 * Find all Table12s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table12s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Table12> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Table12s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table12s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Table12> findAll(String query, Pageable pageable);

    /**
	 * Exports all Table12s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Table12s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Table12.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

