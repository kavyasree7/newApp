/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newapp.Table12;
import com.newapp.Table12Id;


/**
 * ServiceImpl object for domain model class Table12.
 *
 * @see Table12
 */
@Service("createdb_9.Table12Service")
@Validated
public class Table12ServiceImpl implements Table12Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table12ServiceImpl.class);


    @Autowired
    @Qualifier("createdb_9.Table12Dao")
    private WMGenericDao<Table12, Table12Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table12, Table12Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "createdb_9TransactionManager")
    @Override
	public Table12 create(Table12 table12) {
        LOGGER.debug("Creating a new Table12 with information: {}", table12);
        Table12 table12Created = this.wmGenericDao.create(table12);
        return table12Created;
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Table12 getById(Table12Id table12Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table12 by id: {}", table12Id);
        Table12 table12 = this.wmGenericDao.findById(table12Id);
        if (table12 == null){
            LOGGER.debug("No Table12 found with id: {}", table12Id);
            throw new EntityNotFoundException(String.valueOf(table12Id));
        }
        return table12;
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Table12 findById(Table12Id table12Id) {
        LOGGER.debug("Finding Table12 by id: {}", table12Id);
        return this.wmGenericDao.findById(table12Id);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
    @Override
    public Table12 getByColumn3AndColumn4(String column3, String column4) {
        Map<String, Object> column3AndColumn4Map = new HashMap<>();
        column3AndColumn4Map.put("column3", column3);
        column3AndColumn4Map.put("column4", column4);

        LOGGER.debug("Finding Table12 by unique keys: {}", column3AndColumn4Map);
        Table12 table12 = this.wmGenericDao.findByUniqueKey(column3AndColumn4Map);

        if (table12 == null){
            LOGGER.debug("No Table12 found with given unique key values: {}", column3AndColumn4Map);
            throw new EntityNotFoundException(String.valueOf(column3AndColumn4Map));
        }

        return table12;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "createdb_9TransactionManager")
	@Override
	public Table12 update(Table12 table12) throws EntityNotFoundException {
        LOGGER.debug("Updating Table12 with information: {}", table12);
        this.wmGenericDao.update(table12);

        Table12Id table12Id = new Table12Id();
        table12Id.setId(table12.getId());
        table12Id.setColumn2(table12.getColumn2());

        return this.wmGenericDao.findById(table12Id);
    }

    @Transactional(value = "createdb_9TransactionManager")
	@Override
	public Table12 delete(Table12Id table12Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table12 with id: {}", table12Id);
        Table12 deleted = this.wmGenericDao.findById(table12Id);
        if (deleted == null) {
            LOGGER.debug("No Table12 found with id: {}", table12Id);
            throw new EntityNotFoundException(String.valueOf(table12Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Page<Table12> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table12s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
    @Override
    public Page<Table12> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table12s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service createdb_9 for table Table12 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

