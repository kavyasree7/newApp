/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newapp.Table16;


/**
 * ServiceImpl object for domain model class Table16.
 *
 * @see Table16
 */
@Service("createdb_9.Table16Service")
@Validated
public class Table16ServiceImpl implements Table16Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table16ServiceImpl.class);


    @Autowired
    @Qualifier("createdb_9.Table16Dao")
    private WMGenericDao<Table16, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table16, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "createdb_9TransactionManager")
    @Override
	public Table16 create(Table16 table16) {
        LOGGER.debug("Creating a new Table16 with information: {}", table16);
        Table16 table16Created = this.wmGenericDao.create(table16);
        return table16Created;
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Table16 getById(Integer table16Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table16 by id: {}", table16Id);
        Table16 table16 = this.wmGenericDao.findById(table16Id);
        if (table16 == null){
            LOGGER.debug("No Table16 found with id: {}", table16Id);
            throw new EntityNotFoundException(String.valueOf(table16Id));
        }
        return table16;
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Table16 findById(Integer table16Id) {
        LOGGER.debug("Finding Table16 by id: {}", table16Id);
        return this.wmGenericDao.findById(table16Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "createdb_9TransactionManager")
	@Override
	public Table16 update(Table16 table16) throws EntityNotFoundException {
        LOGGER.debug("Updating Table16 with information: {}", table16);
        this.wmGenericDao.update(table16);

        Integer table16Id = table16.getId();

        return this.wmGenericDao.findById(table16Id);
    }

    @Transactional(value = "createdb_9TransactionManager")
	@Override
	public Table16 delete(Integer table16Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table16 with id: {}", table16Id);
        Table16 deleted = this.wmGenericDao.findById(table16Id);
        if (deleted == null) {
            LOGGER.debug("No Table16 found with id: {}", table16Id);
            throw new EntityNotFoundException(String.valueOf(table16Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Page<Table16> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table16s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
    @Override
    public Page<Table16> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table16s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service createdb_9 for table Table16 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

