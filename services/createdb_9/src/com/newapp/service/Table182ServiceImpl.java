/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newapp.Table182;


/**
 * ServiceImpl object for domain model class Table182.
 *
 * @see Table182
 */
@Service("createdb_9.Table182Service")
@Validated
public class Table182ServiceImpl implements Table182Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table182ServiceImpl.class);


    @Autowired
    @Qualifier("createdb_9.Table182Dao")
    private WMGenericDao<Table182, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table182, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "createdb_9TransactionManager")
    @Override
	public Table182 create(Table182 table182) {
        LOGGER.debug("Creating a new Table182 with information: {}", table182);
        Table182 table182Created = this.wmGenericDao.create(table182);
        return table182Created;
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Table182 getById(String table182Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table182 by id: {}", table182Id);
        Table182 table182 = this.wmGenericDao.findById(table182Id);
        if (table182 == null){
            LOGGER.debug("No Table182 found with id: {}", table182Id);
            throw new EntityNotFoundException(String.valueOf(table182Id));
        }
        return table182;
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Table182 findById(String table182Id) {
        LOGGER.debug("Finding Table182 by id: {}", table182Id);
        return this.wmGenericDao.findById(table182Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "createdb_9TransactionManager")
	@Override
	public Table182 update(Table182 table182) throws EntityNotFoundException {
        LOGGER.debug("Updating Table182 with information: {}", table182);
        this.wmGenericDao.update(table182);

        String table182Id = table182.getColumn2();

        return this.wmGenericDao.findById(table182Id);
    }

    @Transactional(value = "createdb_9TransactionManager")
	@Override
	public Table182 delete(String table182Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table182 with id: {}", table182Id);
        Table182 deleted = this.wmGenericDao.findById(table182Id);
        if (deleted == null) {
            LOGGER.debug("No Table182 found with id: {}", table182Id);
            throw new EntityNotFoundException(String.valueOf(table182Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Page<Table182> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table182s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
    @Override
    public Page<Table182> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table182s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service createdb_9 for table Table182 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

