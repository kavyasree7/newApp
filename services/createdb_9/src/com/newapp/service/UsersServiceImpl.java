/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newapp.UserDetails;
import com.newapp.Users;


/**
 * ServiceImpl object for domain model class Users.
 *
 * @see Users
 */
@Service("createdb_9.UsersService")
@Validated
public class UsersServiceImpl implements UsersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsersServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("createdb_9.UserDetailsService")
	private UserDetailsService userDetailsService;

    @Autowired
    @Qualifier("createdb_9.UsersDao")
    private WMGenericDao<Users, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Users, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "createdb_9TransactionManager")
    @Override
	public Users create(Users users) {
        LOGGER.debug("Creating a new Users with information: {}", users);
        Users usersCreated = this.wmGenericDao.create(users);
        if(usersCreated.getUserDetailses() != null) {
            for(UserDetails userDetailse : usersCreated.getUserDetailses()) {
                userDetailse.setUsersByUsers(usersCreated);
                LOGGER.debug("Creating a new child UserDetails with information: {}", userDetailse);
                userDetailsService.create(userDetailse);
            }
        }
        return usersCreated;
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Users getById(Integer usersId) throws EntityNotFoundException {
        LOGGER.debug("Finding Users by id: {}", usersId);
        Users users = this.wmGenericDao.findById(usersId);
        if (users == null){
            LOGGER.debug("No Users found with id: {}", usersId);
            throw new EntityNotFoundException(String.valueOf(usersId));
        }
        return users;
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Users findById(Integer usersId) {
        LOGGER.debug("Finding Users by id: {}", usersId);
        return this.wmGenericDao.findById(usersId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "createdb_9TransactionManager")
	@Override
	public Users update(Users users) throws EntityNotFoundException {
        LOGGER.debug("Updating Users with information: {}", users);
        this.wmGenericDao.update(users);

        Integer usersId = users.getUserId();

        return this.wmGenericDao.findById(usersId);
    }

    @Transactional(value = "createdb_9TransactionManager")
	@Override
	public Users delete(Integer usersId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Users with id: {}", usersId);
        Users deleted = this.wmGenericDao.findById(usersId);
        if (deleted == null) {
            LOGGER.debug("No Users found with id: {}", usersId);
            throw new EntityNotFoundException(String.valueOf(usersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public Page<Users> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
    @Override
    public Page<Users> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service createdb_9 for table Users to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "createdb_9TransactionManager")
    @Override
    public Page<UserDetails> findAssociatedUserDetailses(Integer userId, Pageable pageable) {
        LOGGER.debug("Fetching all associated userDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByUsers.userId = '" + userId + "'");

        return userDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserDetailsService instance
	 */
	protected void setUserDetailsService(UserDetailsService service) {
        this.userDetailsService = service;
    }

}

